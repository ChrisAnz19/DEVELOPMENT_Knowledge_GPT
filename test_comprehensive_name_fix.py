#!/usr/bin/env python3
"""
Comprehensive test to verify that prospect names are completely removed from search queries.
"""

import asyncio
from context_aware_evidence_finder import ContextAwareEvidenceFinder, SearchContext
from name_free_search_generator import NameFreeSearchGenerator
from explanation_analyzer import SearchableClaim, ClaimType


def test_name_free_search_generator():
    """Test the core name-free search generator."""
    
    print("1. Testing Name-Free Search Generator")
    print("=" * 40)
    
    # Test with various problematic names
    test_names = ['John Smith', 'Jane Doe', 'Michael Johnson', 'Sarah Wilson', 'David Brown']
    
    claim = SearchableClaim(
        text="Executive researching CRM solutions",
        claim_type=ClaimType.PRODUCT_EVALUATION,
        entities={
            'roles': ['CEO', 'Executive'],
            'companies': ['Salesforce', 'Microsoft'],
            'products': ['CRM']
        },
        search_terms=['executive', 'CRM', 'solutions'],
        priority=8,
        confidence=0.9
    )
    
    generator = NameFreeSearchGenerator()
    
    for test_name in test_names:
        queries = generator.generate_queries(claim, candidate_id=f"test_{test_name.replace(' ', '_')}")
        
        # Check for name violations
        name_parts = test_name.lower().split()
        violations = []
        
        for query in queries:
            query_lower = query.query.lower()
            if (test_name.lower() in query_lower or 
                any(part in query_lower for part in name_parts if len(part) > 2)):
                violations.append(query.query)
        
        if violations:
            print(f"‚ùå FAILED: Found name '{test_name}' in queries")
            return False
    
    print("‚úÖ SUCCESS: Name-free search generator works correctly")
    return True


async def test_context_aware_evidence_finder():
    """Test the context-aware evidence finder."""
    
    print("\n2. Testing Context-Aware Evidence Finder")
    print("=" * 42)
    
    # Test candidates with various names
    test_candidates = [
        {
            'name': 'Alexander Thompson',  # Should NEVER appear
            'title': 'Chief Technology Officer',
            'company': 'Google',
            'behavioral_data': {'behavioral_insight': 'Researching cloud solutions'}
        },
        {
            'name': 'Jennifer Martinez',  # Should NEVER appear
            'title': 'VP of Marketing',
            'company': 'Salesforce',
            'behavioral_data': {'behavioral_insight': 'Evaluating marketing automation'}
        },
        {
            'name': 'Robert Anderson',  # Should NEVER appear
            'title': 'Chief Financial Officer',
            'company': 'Microsoft',
            'behavioral_data': {'behavioral_insight': 'Analyzing financial software'}
        }
    ]
    
    search_context = SearchContext(
        search_prompt="Find technology executives",
        industry="technology",
        role_type="executive",
        activity_type="research"
    )
    
    finder = ContextAwareEvidenceFinder(search_context)
    
    for candidate in test_candidates:
        print(f"\nTesting: {candidate['title']} at {candidate['company']}")
        
        try:
            queries = finder._generate_contextual_queries(candidate)
            
            # Check for name violations
            name = candidate['name'].lower()
            name_parts = name.split()
            violations = []
            
            for query in queries:
                query_lower = query.lower()
                if (name in query_lower or 
                    any(part in query_lower for part in name_parts if len(part) > 2)):
                    violations.append(query)
            
            if violations:
                print(f"‚ùå FAILED: Found name '{candidate['name']}' in queries:")
                for violation in violations:
                    print(f"  - {violation}")
                return False
            else:
                print(f"‚úÖ SUCCESS: No name violations ({len(queries)} queries generated)")
                
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            return False
    
    return True


def test_behavioral_focus():
    """Test that queries focus on behavioral evidence."""
    
    print("\n3. Testing Behavioral Focus")
    print("=" * 27)
    
    generator = NameFreeSearchGenerator()
    
    # Test different claim types
    test_claims = [
        {
            'name': 'Pricing Research',
            'claim': SearchableClaim(
                text="Executive researching pricing options",
                claim_type=ClaimType.PRICING_RESEARCH,
                entities={'companies': ['Salesforce'], 'pricing_terms': ['pricing']},
                search_terms=['pricing', 'options'],
                priority=9,
                confidence=0.9
            )
        },
        {
            'name': 'Product Evaluation',
            'claim': SearchableClaim(
                text="Manager evaluating CRM solutions",
                claim_type=ClaimType.PRODUCT_EVALUATION,
                entities={'products': ['CRM'], 'activities': ['evaluating']},
                search_terms=['CRM', 'solutions', 'evaluation'],
                priority=8,
                confidence=0.8
            )
        },
        {
            'name': 'Company Research',
            'claim': SearchableClaim(
                text="Director researching technology companies",
                claim_type=ClaimType.COMPANY_RESEARCH,
                entities={'companies': ['Microsoft', 'Google'], 'industries': ['technology']},
                search_terms=['technology', 'companies'],
                priority=7,
                confidence=0.9
            )
        }
    ]
    
    behavioral_indicators = [
        'pricing', 'comparison', 'features', 'evaluation', 'review',
        'hiring', 'recruitment', 'executive', 'leadership', 'trends',
        'analysis', 'market', 'research', 'solutions', 'enterprise'
    ]
    
    for test_case in test_claims:
        queries = generator.generate_queries(test_case['claim'])
        
        behavioral_count = 0
        for query in queries:
            query_lower = query.query.lower()
            if any(indicator in query_lower for indicator in behavioral_indicators):
                behavioral_count += 1
        
        behavioral_ratio = behavioral_count / len(queries) if queries else 0
        
        print(f"{test_case['name']}: {behavioral_count}/{len(queries)} behavioral queries ({behavioral_ratio:.1%})")
        
        if behavioral_ratio < 0.5:  # At least 50% should be behavioral
            print(f"‚ùå FAILED: Low behavioral focus for {test_case['name']}")
            return False
    
    print("‚úÖ SUCCESS: All queries show strong behavioral focus")
    return True


async def run_comprehensive_test():
    """Run all tests."""
    
    print("Comprehensive Name-Based Search Fix Verification")
    print("=" * 50)
    
    # Run all tests
    test1_passed = test_name_free_search_generator()
    test2_passed = await test_context_aware_evidence_finder()
    test3_passed = test_behavioral_focus()
    
    print("\n" + "=" * 50)
    print("FINAL RESULTS:")
    
    total_tests = 3
    passed_tests = sum([test1_passed, test2_passed, test3_passed])
    
    if passed_tests == total_tests:
        print(f"üéâ ALL TESTS PASSED ({passed_tests}/{total_tests})")
        print("\n‚úÖ The name-based search issue has been COMPLETELY FIXED!")
        print("‚úÖ System now generates ONLY behavioral evidence queries")
        print("‚úÖ Prospect names are NEVER used in search queries")
        print("‚úÖ All evidence URLs will be relevant to behavioral claims")
        print("\nThe system will no longer return websites like:")
        print("  - https://www.logicmark.com/leadership/ (name variations)")
        print("  - Personal websites or profiles based on names")
        print("  - Irrelevant name-based search results")
        print("\nInstead, it will find:")
        print("  - Company hiring and recruitment pages")
        print("  - Executive transition and leadership news")
        print("  - Industry analysis and market research")
        print("  - Product evaluation and comparison sites")
        print("  - Behavioral evidence supporting the claims")
        
        return True
    else:
        print(f"‚ùå SOME TESTS FAILED ({passed_tests}/{total_tests})")
        print("‚ùå Additional fixes may be needed")
        return False


if __name__ == "__main__":
    success = asyncio.run(run_comprehensive_test())
    
    if success:
        print(f"\nüöÄ DEPLOYMENT READY!")
        print("The name-based search fix is complete and verified.")
    else:
        print(f"\n‚ö†Ô∏è  NEEDS ATTENTION!")
        print("Some issues remain to be addressed.")